<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotsAndBoxes</name>
    </assembly>
    <members>
        <member name="M:DotsAndBoxes.Board.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            Creates a board of the specified size and initializes the boxes
            </summary>
            <param name="theRows">The number of rows</param>
            <param name="theCols">The number of columns</param>
        </member>
        <member name="M:DotsAndBoxes.Board.#ctor(DotsAndBoxes.Board)">
            <summary>
            Constructor
            Creates a copy of the input board
            </summary>
            <param name="theBoard">The board to copy</param>
        </member>
        <member name="M:DotsAndBoxes.Board.ClaimSide(System.Int32,System.Int32,DotsAndBoxes.BoxSide,DotsAndBoxes.Player)">
            <summary>
            Adds a side to the specified position
            Adding a side to a box also adds the corresponding side to the adjacent box
            </summary>
            <param name="RowNum">The row of the box</param>
            <param name="ColNum">The column of the box</param>
            <param name="theSide">The side of the box</param>
        </member>
        <member name="M:DotsAndBoxes.Board.ClaimSide(DotsAndBoxes.Side,DotsAndBoxes.Player)">
            <summary>
            Adds a side to the specified position
            Adding a side to a box also adds the corresponding side to the adjacent box
            </summary>
            <param name="theSide">The Side to claim</param>
            <param name="thePlayer"></param>
        </member>
        <member name="M:DotsAndBoxes.Board.GetFreeSides">
            <summary>
            Returns a list of Sides representing the available sides on the board
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotsAndBoxes.Board.GetAllSides">
            <summary>
            Returns a list of Sides of all the sides on the board
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotsAndBoxes.Board.IsSideFree(DotsAndBoxes.Side)">
            <summary>
            Returns a boolean indicating if the specified side is free
            </summary>
            <param name="theSide">The Side to check</param>
            <returns>True if the side is free</returns>
        </member>
        <member name="M:DotsAndBoxes.Board.GetBox(System.Int32,System.Int32)">
            <summary>
            Returns the box at the specified index
            </summary>
            <param name="RowNum"></param>
            <param name="ColNum"></param>
            <returns></returns>
        </member>
        <member name="M:DotsAndBoxes.Board.GetScore(DotsAndBoxes.Player)">
            <summary>
            Returns the number of boxes owned by the specified player
            </summary>
            <param name="thePlayer">The player's score to get</param>
            <returns>The number of boxes owned by the player</returns>
        </member>
        <member name="M:DotsAndBoxes.Board.GameOver">
            <summary>
            Returns a boolean indicating if the game is over
            </summary>
            <returns>Flag is true when all boxes have 4 sides</returns>
        </member>
        <member name="F:DotsAndBoxes.Box.Owner">
            <summary>
            Properties
            </summary>
        </member>
        <member name="M:DotsAndBoxes.Box.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="theRow">The row index</param>
            <param name="theColumn">The column index</param>
        </member>
        <member name="M:DotsAndBoxes.Box.#ctor(System.Int32,System.Int32,DotsAndBoxes.Side)">
            <summary>
            Constructor
            </summary>
            <param name="theRow">The row index</param>
            <param name="theColumn">The column index</param>
            <param name="theSide">The side to set</param>
        </member>
        <member name="M:DotsAndBoxes.Box.#ctor(DotsAndBoxes.Box)">
            <summary>
            Constructor
            </summary>
            <param name="theBox">The Box to duplicate</param>
        </member>
        <member name="M:DotsAndBoxes.Box.ClaimSide(DotsAndBoxes.BoxSide,DotsAndBoxes.Player)">
            <summary>
            Adds a side to the box
            </summary>
            <param name="theSide"></param>
            <param name="thePlayer"></param>
        </member>
        <member name="M:DotsAndBoxes.Box.ClaimSide(DotsAndBoxes.Side,DotsAndBoxes.Player)">
            <summary>
            Adds a side to the box
            </summary>
            <param name="theSide">The side to add</param>
        </member>
        <member name="M:DotsAndBoxes.Box.NumSides">
            <summary>
            The number of sides of the box
            </summary>
            <returns>The number of sides</returns>
        </member>
        <member name="F:DotsAndBoxes.Dot.Coordinates">
            <summary>
            Properties
            </summary>
        </member>
        <member name="M:DotsAndBoxes.Dot.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DotsAndBoxes.Dot.#ctor(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="thePoint"></param>
            <param name="theRow"></param>
            <param name="theCol"></param>
        </member>
        <member name="F:DotsAndBoxes.MainWindow.drawArea">
            <summary>
            Properties
            </summary>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.DrawButton_Click(System.Object,System.EventArgs)">
            <summary>
            Draw button click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.DrawDots(System.Int32,System.Int32)">
            <summary>
            Draws the dots
            </summary>
            <param name="Rows">Number of rows of dots</param>
            <param name="Cols">Number of columns of dots</param>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.panel2_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Game area click down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.panel2_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Game area click release
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.HumanMove(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on the game area
            </summary>
            <param name="downX"></param>
            <param name="downY"></param>
            <param name="upX"></param>
            <param name="upY"></param>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.ComputerMove">
            <summary>
            Lets the computer take a turn
            </summary>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.GetPointsFromSide(DotsAndBoxes.Side,System.Drawing.Point@,System.Drawing.Point@)">
            <summary>
            Returns the start and end points based on a Side
            </summary>
            <param name="theSide">The Side to get the start and ends points for</param>
            <param name="StartPoint">The starting Point of the line</param>
            <param name="EndPoint">The ending Point of the line</param>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.GetSide(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Side from the start and end points of the drawn line
            </summary>
            <param name="StartX">Line start X coordinate</param>
            <param name="StartY">Line start Y coordinate</param>
            <param name="EndX">Line end X coordinate</param>
            <param name="EndY">Line end Y coordinate</param>
            <returns>The Side that was drawn</returns>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.GetDot(System.Int32,System.Int32)">
            <summary>
            Returns the (row, col) point from the X,Y coordinates
            </summary>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <returns>Point of (row, col) index</returns>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.GameOver">
            <summary>
            Called when the game is over
            </summary>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.panel2_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Drwa the board and all lines made by human and computer, must draw all lines in this
            paint method to maintain board graphics when minimizing
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:DotsAndBoxes.MainWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DotsAndBoxes.MainWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DotsAndBoxes.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="F:DotsAndBoxes.Side.Owner">
            <summary>
            Properties
            </summary>
        </member>
        <member name="M:DotsAndBoxes.Side.#ctor(System.Int32,System.Int32,DotsAndBoxes.BoxSide)">
            <summary>
            Constructor
            </summary>
            <param name="theRow">The row of the box</param>
            <param name="theCol">The column of the box</param>
            <param name="theBoxSide">The side of the box</param>
        </member>
        <member name="M:DotsAndBoxes.Side.#ctor(DotsAndBoxes.Box,DotsAndBoxes.BoxSide)">
            <summary>
            Constructor
            </summary>
            <param name="theBox">The box</param>
            <param name="theBoxSide">The side of the box</param>
        </member>
        <member name="M:DotsAndBoxes.Side.#ctor(DotsAndBoxes.Side)">
            <summary>
            Constructor
            </summary>
            <param name="theSide">the Side to duplicate</param>
        </member>
        <member name="M:DotsAndBoxes.Side.Equals(DotsAndBoxes.Side)">
            <summary>
            Returns a boolean indicating if the specified side is equal to this side
            </summary>
            <param name="theOtherSide">The side to compare to</param>
            <returns>True if the sides are equal</returns>
        </member>
        <member name="F:DotsAndBoxes.Solver.PlayerID">
            <summary>
            Properties
            </summary>
        </member>
        <member name="M:DotsAndBoxes.Solver.#ctor(DotsAndBoxes.Player,DotsAndBoxes.Skill)">
            <summary>
            Constructor
            Creates a new solver with the specified player ID
            </summary>
            <param name="thePlayer">The player ID</param>
        </member>
        <member name="M:DotsAndBoxes.Solver.TakeTurn(DotsAndBoxes.Board,System.Collections.Generic.List{DotsAndBoxes.Side}@)">
            <summary>
            Takes a turn on the provided board, and returns the resulting board.
            If the player completes a box, he will take another turn.
            </summary>
            <param name="theBoard">The board to play the turn</param>
            <returns>The board after playing this turn</returns>
        </member>
        <member name="T:DotsAndBoxes.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotsAndBoxes.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotsAndBoxes.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
